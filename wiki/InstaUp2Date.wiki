InstaUp2Date is a front-end for InstaDMG that is now included in the base package.

= Introduction =

InstaDMG is focused on producing a single base image and producing the same thing every single time, changing only the things that you deliberately change in the process. However, many people need to produce many different images with different load-sets on them. For that purpose InstaDMG becomes a little unwieldy.

However, included in the package with InstaDMG is an add-on program, InstaUp2Date, that can be used to manage the folders that InstaDMG uses. It uses files called "catalog files" (with an extension of .catalog) to list out the software that should be in a particular image. These catalog files can reference each other, so you can create a base image or pools of shared software so that you only have to make a single adjustment when something changes.

The catalog files reference the installers that they will be managing in one of three ways:
  # A filesystem reference to a folder containing .pkg installers or to a dmg containing .pkg installers.
  # A file/folder name to be searched for in the InstaDMG/InstallerFiles/InstaUp2DatePackages folder.
  # A http(s) reference to a dmg containing .pkg installers.

The references to other .catalog files can also be any of those types, allowing (in principal) for a shared baseOS catalog file to referenced.

At this point everything is command-line only, but InstaUp2Date is written in Python and has been written with the possibility of sliding a Cocoa GUI on in mind.

= Installation =

InstaUp2Date is included with InstaDMG, so no installation is necessary. It is in InstaDMG/AddOns/InstaUp2Date, and should probably be left there. While running it will automatically 'cd' to the InstaDMG folder, so you can run it from within any folder without changing things.

= Using InstaDMG =

== 

= Command Line Options =

There are three command line options that InstaUp2Date will accept:

{{{-h}}} or {{{--help}}}		Print the usage information and exit.

{{{-p}}} or {{{--process}}}	Runs InstaDMG after successfully setting things up. This requires being run as root, and will pass additional information to InstaDMG (such as the image and dmg names)

{{{-v}}} or {{{--version}}}	Print version information and quit.

= Creating Catalog Files =

== Creating Checksums ==

Since all of the lines in a catalog file require (or at least strongly encourage) a checksum, there is an included tool to help you produce checksums for the files you are using. The tool is conveniently called "checksum.py" and is located in the same folder as the !instaUp2Date.py script. To use it just call it like this (on the command line):

{{{/path/to/checksum.py <<catalog file>>}}}

If you would like to run InstaDMG immediately after preparing the folders for it, then you just have to add either {{{-p}}} or {{{--process}}} to the invocation. When called like this InstaUp2Date will call InstaDMG, and even add appropriate command-line switches to use the file names as are specified in the command files. An invocation like this needs to be run as root, and might look like this:

{{{sudo /path/to/checksum.py --process <<catalog file>>}}}

Additionally, you can supply multiple catalog files. InstaUp2Date will run through them one after another. This is most useful if you are using the {{{--process}}} flag as at the start of each run the setup from the previous run is wiped out. However it might be useful to know that all of your catalog files are (at least mostly) valid and that you have downloaded all the relevant http files.

= Internal Details =

= Random Notes =

  * InstaUpToDate does not add any extra abilities to InstaDMG once it starts running. It only allows the automation of setting things up before you run InstaDMG. So you can't do anything using InstaUp2Date that was not already possible with InstaDMG.

  * The script is still in a somewhat rough form. I am using it in my workflow, and it is working, but it has not been extensively tested at this point. No warrantee is implied at all.

  * Additions and bug-fixes are always welcome

  * At the moment error reporting is very rough. Often you will need to read through the code to figure out what went wrong. Sometime in the future this will be cleaned up some.

  * InstaUp2Date is under the same license as InstaDMG.


= Future Directions =

These are ideas that InstaUp2Date might take, but are not promises:

  * There are a bunch of problems that combining InstaDMG and InstaUp2Date together into one program would solve. This includes: having pre/postflight scripts, adding items without pkg's, and improving the loging in InstaDMG (right now stderr is really tough).

  * Add a Cocoa GUI.

  * Do more pre-flighting of the items to make sure that they include pkg's.

  * Allow for some introspection into pkg's... possibly even use a union mount to allow pre and postflight scripts to be edited without changing anything. This would require the first item.